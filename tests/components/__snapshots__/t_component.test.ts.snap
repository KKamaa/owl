// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-component can switch between dynamic components without the need for a t-key 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child a</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component can switch between dynamic components without the need for a t-key 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child b</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component can switch between dynamic components without the need for a t-key 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    let Comp2 = ctx['constructor'].components[ctx['state'].child];
    b1.children[0] = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, node));
    return b1;
  }
}"
`;

exports[`t-component can use dynamic components (the class) if given (with different root tagname) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child a</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component can use dynamic components (the class) if given (with different root tagname) 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child b</div>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component can use dynamic components (the class) if given (with different root tagname) 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, node = ctx.__owl__) {
    let key0;
    key0 = ctx['state'].child;
    let Comp2 = ctx['myComponent'];
    const b1 = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, node));
    return b1;
  }
}"
`;

exports[`t-component can use dynamic components (the class) if given 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child a</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component can use dynamic components (the class) if given 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child b</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component can use dynamic components (the class) if given 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, node = ctx.__owl__) {
    let key0;
    key0 = ctx['state'].child;
    let Comp2 = ctx['myComponent'];
    const b1 = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, node));
    return b1;
  }
}"
`;

exports[`t-component modifying a sub widget 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-text/><button>Inc</button></div>\`);
    data = new Array(1);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el.firstChild.nextSibling, \`click\`, 0);
    }
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, node = ctx.__owl__) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.data[0] = ctx['state'].counter;
    const v1 = ctx['state'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.counter++ })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;

exports[`t-component modifying a sub widget 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    let Comp2 = ctx['Counter'];
    b1.children[0] = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, node));
    return b1;
  }
}"
`;

exports[`t-component switching dynamic component 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child a</div>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component switching dynamic component 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new BText(\`child b\`);
    return b1;
  }
}"
`;

exports[`t-component switching dynamic component 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, node = ctx.__owl__) {
    let Comp2 = ctx['Child'];
    const b1 = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, node));
    return b1;
  }
}"
`;

exports[`t-component t-component works in simple case 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child</div>\`);
  }
  
  return function template(ctx, node = ctx.__owl__) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component t-component works in simple case 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, node = ctx.__owl__) {
    let Comp2 = ctx['Child'];
    const b1 = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, node));
    return b1;
  }
}"
`;
