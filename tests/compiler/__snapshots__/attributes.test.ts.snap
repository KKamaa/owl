// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attributes changing a class with t-att-class (preexisting class 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"hoy\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['v']);
    return b1;
  }
}"
`;

exports[`attributes changing a class with t-att-class 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['v']);
    return b1;
  }
}"
`;

exports[`attributes changing an attribute with t-att- 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`value\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['v'];
    return b1;
  }
}"
`;

exports[`attributes class and t-att-class should combine together 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"hello\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['value']);
    return b1;
  }
}"
`;

exports[`attributes class and t-attf-class with ternary operation 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"hello\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj((ctx['value']?'world':''));
    return b1;
  }
}"
`;

exports[`attributes dynamic attribute evaluating to 0 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`attributes dynamic attribute falsy variable  1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`attributes dynamic attribute with a dash 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`data-action-id\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['id'];
    return b1;
  }
}"
`;

exports[`attributes dynamic attributes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = 'bar';
    return b1;
  }
}"
`;

exports[`attributes dynamic class attribute 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['c']);
    return b1;
  }
}"
`;

exports[`attributes dynamic class attribute evaluating to 0 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['value']);
    return b1;
  }
}"
`;

exports[`attributes dynamic empty class attribute 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['c']);
    return b1;
  }
}"
`;

exports[`attributes dynamic formatted attributes with a dash 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`aria-label\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = \`Some text \${ctx['id']}\`;
    return b1;
  }
}"
`;

exports[`attributes fixed variable 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`attributes format expression 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = (ctx['value']+37);
    return b1;
  }
}"
`;

exports[`attributes format literal 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = \`bar\`;
    return b1;
  }
}"
`;

exports[`attributes format multiple 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = \`a \${ctx['value1']} is \${ctx['value2']} of \${ctx['value3']} ]\`;
    return b1;
  }
}"
`;

exports[`attributes format value 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttr(this.el, \`foo\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = \`b\${ctx['value']}r\`;
    return b1;
  }
}"
`;

exports[`attributes from object variables set previously 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><span/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`o\`] = {a:'b'};
    b1.data[0] = toClassObj(ctx['o'].a);
    return b1;
  }
}"
`;

exports[`attributes from variables set previously (no external node) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[\`abc\`] = 'def';
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['abc']);
    return b1;
  }
}"
`;

exports[`attributes from variables set previously 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><span/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`abc\`] = 'def';
    b1.data[0] = toClassObj(ctx['abc']);
    return b1;
  }
}"
`;

exports[`attributes object 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttrs(this.el, data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`attributes static attributes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div foo=\\"a\\" bar=\\"b\\" baz=\\"c\\"/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`attributes static attributes on void elements 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<img src=\\"/test.jpg\\" alt=\\"Test\\"/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`attributes static attributes with dashes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div aria-label=\\"Close\\"/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`attributes t-att-class and class should combine together 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"hello\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(ctx['value']);
    return b1;
  }
}"
`;

exports[`attributes t-att-class with multiple classes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj({'a b c':ctx['value']});
    return b1;
  }
}"
`;

exports[`attributes t-att-class with multiple classes 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj({['a b c']:ctx['value']});
    return b1;
  }
}"
`;

exports[`attributes t-att-class with object 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"static\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj({a:ctx['b'],c:ctx['d'],e:ctx['f']});
    return b1;
  }
}"
`;

exports[`attributes t-attf-class 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(\`hello\`);
    return b1;
  }
}"
`;

exports[`attributes t-attf-class should combine with class 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"hello\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(\`world\`);
    return b1;
  }
}"
`;

exports[`attributes t-attf-class with multiple classes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(\`hello \${ctx['word']}\`);
    return b1;
  }
}"
`;

exports[`attributes t-attf-class with multiple classes separated by multiple spaces 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj(\`hello  \${ctx['word']}\`);
    return b1;
  }
}"
`;

exports[`attributes tuple literal 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttrs(this.el, data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ['foo','bar'];
    return b1;
  }
}"
`;

exports[`attributes tuple variable 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateAttrs(this.el, data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`attributes two classes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div class=\\"a b\\"/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`attributes two dynamic attributes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div/>\`);
    data = new Array(2);
    update(prevData, data) {
      const el1 = this.el;
      this.updateAttr(el1, \`foo\`, this.data[0]);
      this.updateAttr(el1, \`bar\`, this.data[1]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = 'bar';
    b1.data[1] = 'foo';
    return b1;
  }
}"
`;

exports[`attributes updating classes (with obj notation) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div class=\\"hoy\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      this.updateClass(this.el, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = toClassObj({'a b':ctx['condition']});
    return b1;
  }
}"
`;

exports[`attributes various escapes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div foo=\\"<foo\\"/>\`);
    data = new Array(3);
    update(prevData, data) {
      const el1 = this.el;
      this.updateAttr(el1, \`bar\`, this.data[0]);
      this.updateAttr(el1, \`baz\`, this.data[1]);
      this.updateAttrs(el1, data[2]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['bar'];
    b1.data[1] = \`<\${ctx['baz']}>\`;
    b1.data[2] = ctx['qux'];
    return b1;
  }
}"
`;

exports[`special cases for some specific html attributes/properties input of type checkbox with t-att-indeterminate 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<input type=\\"checkbox\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      const el1 = this.el;
      this.updateAttr(el1, \`indeterminate\`, this.data[0]);
      this.updateProp(el1, \`indeterminate\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['v'];
    return b1;
  }
}"
`;

exports[`special cases for some specific html attributes/properties input type= checkbox, with t-att-checked 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<input type=\\"checkbox\\"/>\`);
    data = new Array(1);
    update(prevData, data) {
      const el1 = this.el;
      this.updateAttr(el1, \`checked\`, this.data[0]);
      this.updateProp(el1, \`checked\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['flag'];
    return b1;
  }
}"
`;

exports[`special cases for some specific html attributes/properties input with t-att-value 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<input/>\`);
    data = new Array(1);
    update(prevData, data) {
      const el1 = this.el;
      this.updateAttr(el1, \`value\`, this.data[0]);
      this.updateProp(el1, \`value\`, this.data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['v'];
    return b1;
  }
}"
`;

exports[`special cases for some specific html attributes/properties various boolean html attributes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div><input type=\\"checkbox\\" checked=\\"checked\\"/><input checked=\\"checked\\"/><div checked=\\"checked\\"/><div selected=\\"selected\\"/><option selected=\\"selected\\" other=\\"1\\"/><input readonly=\\"readonly\\"/><button disabled=\\"disabled\\"/></div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;
