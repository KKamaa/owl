// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`style and class handling can set class on multi root component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>a</div>\`);
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>b</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    return b1;
  }
}"
`;

exports[`style and class handling can set class on multi root component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`fromparent\`);
    return b1;
  }
}"
`;

exports[`style and class handling can set class on sub component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling can set class on sub component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`some-class\`);
    return b1;
  }
}"
`;

exports[`style and class handling can set class on sub sub component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>childchild</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling can set class on sub sub component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`ChildChild\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`fromchild\`);
    return b1;
  }
}"
`;

exports[`style and class handling can set class on sub sub component 3`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`fromparent\`);
    return b1;
  }
}"
`;

exports[`style and class handling can set more than one class on sub component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling can set more than one class on sub component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`a  b\`);
    return b1;
  }
}"
`;

exports[`style and class handling can set style and class on component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div style=\\"font-weight:bold;\\" class=\\"some-class\\">world</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling class is properly added on widget root el 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div class=\\"c\\"/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling class is properly added on widget root el 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b2.parentClass = toClassObj(\`a b\`);
    return b1;
  }
}"
`;

exports[`style and class handling class on sub component, which is switched to another 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>a</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling class on sub component, which is switched to another 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>b</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling class on sub component, which is switched to another 3`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(2);
    if (ctx['props'].child==='a') {
      b1.children[0] = node.getChild(\`ChildA\`, {}, key + \`__1\`, ctx);
    } else {
      b1.children[1] = node.getChild(\`ChildB\`, {}, key + \`__2\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`style and class handling class on sub component, which is switched to another 4`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {child: ctx['state'].child}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`someclass\`);
    return b1;
  }
}"
`;

exports[`style and class handling component class and parent class combine together 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div class=\\"child\\">child</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling component class and parent class combine together 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`from parent\`);
    return b1;
  }
}"
`;

exports[`style and class handling empty class attribute is not added on widget root el 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`style and class handling empty class attribute is not added on widget root el 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`style and class handling nothing happens if sub component is just some text 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BText(\`child\`);
    return b1;
  }
}"
`;

exports[`style and class handling nothing happens if sub component is just some text 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`some-class\`);
    return b1;
  }
}"
`;

exports[`style and class handling setting a class on a child component with text node 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BText(\`child\`);
    return b1;
  }
}"
`;

exports[`style and class handling setting a class on a child component with text node 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.parentClass = toClassObj(\`some-class\`);
    return b1;
  }
}"
`;
