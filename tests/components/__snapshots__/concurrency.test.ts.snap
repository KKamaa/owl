// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async rendering destroying a widget before start is over 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`components in a node in a t-foreach  1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].item;
    return b1;
  }
}"
`;

exports[`components in a node in a t-foreach  2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><ul><owl-anchor/></ul></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<li><owl-anchor/></li>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['items']);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = i1;
      key1 = 'li_'+ctx['item'];
      const b3 = b2.children[i1] = new Block2();
      b3.children[0] = new BComponent(\`Child\`, {item: ctx['item']}, \`__1__\${key1}\`, ctx, parent);
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`concurrent renderings scenario 1 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/><owl-text/></span>\`);
    data = new Array(2);
    update() {
      const el1 = this.el.firstChild;
      el1.textContent = toString(this.data[0]);
      el1.nextSibling.textContent = toString(this.data[1]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].fromA;
    b1.data[1] = ctx['someValue']();
    return b1;
  }
}"
`;

exports[`concurrent renderings scenario 1 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<p><owl-anchor/></p>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ComponentC\`, {fromA: ctx['props'].fromA,fromB: ctx['state'].fromB}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`concurrent renderings scenario 1 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ComponentB\`, {fromA: ctx['state'].fromA}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`concurrent renderings scenario 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/><owl-text/></span>\`);
    data = new Array(2);
    update() {
      const el1 = this.el.firstChild;
      el1.textContent = toString(this.data[0]);
      el1.nextSibling.textContent = toString(this.data[1]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].fromA;
    b1.data[1] = ctx['props'].fromB;
    return b1;
  }
}"
`;

exports[`concurrent renderings scenario 2 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<p><owl-anchor/></p>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ComponentC\`, {fromA: ctx['props'].fromA,fromB: ctx['state'].fromB}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`concurrent renderings scenario 2 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-text/><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    data = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild.nextSibling;
    }
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['state'].fromA;
    b1.children[0] = new BComponent(\`ComponentB\`, {fromA: ctx['state'].fromA}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 1 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['getValue']();
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 1 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>b</span>\`);
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 1 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return (ctx, parent = ctx) => {
    const b1 = new BMulti(2);
    if (ctx['state'].flagA) {
      b1.children[0] = new BComponent(\`ChildA\`, {}, \`__1\`, ctx, parent);
    }
    if (ctx['state'].flagB) {
      b1.children[1] = new BComponent(\`ChildB\`, {}, \`__2\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>a<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 2 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>b<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 2 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    if (ctx['state'].flagB) {
      b1.children[1] = new BComponent(\`ChildB\`, {val: ctx['state'].valB}, \`__2\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 3 (patching in the same frame) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>a<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 3 (patching in the same frame) 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>b<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 3 (patching in the same frame) 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    if (ctx['state'].flagB) {
      b1.children[1] = new BComponent(\`ChildB\`, {val: ctx['state'].valB}, \`__2\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`destroying/recreating a subwidget with different props (if start is not over) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>child:<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`destroying/recreating a subwidget with different props (if start is not over) 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    if (ctx['state'].val>1) {
      b1.children[0] = new BComponent(\`Child\`, {val: ctx['state'].val}, \`__1\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`properly behave when destroyed/unmounted while rendering  1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`properly behave when destroyed/unmounted while rendering  2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`SubChild\`, {}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`properly behave when destroyed/unmounted while rendering  3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    if (ctx['state'].flag) {
      b1.children[0] = new BComponent(\`Child\`, {val: ctx['state'].val}, \`__1\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`rendering component again in next microtick 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>Child</div>\`);
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`rendering component again in next microtick 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><button>Click</button><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    handlers = new Array(1);
    build() {
      const el1 = this.el.firstChild;
      this.setupHandler(el1, 0);
      this.anchors[0] = el1.nextSibling;
    }
  }
  
  return (ctx, parent = ctx) => {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = [\`click\`, (e) => ctx.__owl__.component['onClick'](e), ctx];
    if (ctx['env'].flag) {
      b1.children[0] = new BComponent(\`Child\`, {}, \`__1\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`update a sub-component twice in the same frame 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`update a sub-component twice in the same frame 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`update a sub-component twice in the same frame, 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['val']();
    return b1;
  }
}"
`;

exports[`update a sub-component twice in the same frame, 2 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;
