// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adding/removing elements add element at beginning and end: 2,3,4 => 1,2,3,4,5 (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements add element at beginning and end: 2,3,4 => 1,2,3,4,5 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements add element in middle: 1,2,4,5 => 1,2,3,4,5 (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements add element in middle: 1,2,4,5 => 1,2,3,4,5 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adding one element at the end (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adding one element at the end 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adding two elements at the end (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adding two elements at the end 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adds children (inside elem): [] => [1,2,3] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-anchor/></p>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block3 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['items'], true, true);
    ctx = Object.create(ctx);
    const k1 = b2.values, v1 = b2.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b3 = b2.children[i1] = new BMulti(2);
      const b4 = b3.children[0] = new Block2();
      b4.data[0] = ctx['item'];
      const b5 = b3.children[1] = new Block3();
      b5.data[0] = ctx['item'];
      b2.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adds children (inside elem): [] => [1,2,3] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-anchor/></p>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['items'], true, true);
    ctx = Object.create(ctx);
    const k1 = b2.values, v1 = b2.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b3 = b2.children[i1] = new Block2();
      b3.data[0] = ctx['item'];
      b2.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adds children: [] => [1,2,3] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements adds children: [] => [1,2,3] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements prepend elements: 4,5 => 1,2,3,4,5 (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements prepend elements: 4,5 => 1,2,3,4,5 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children (inside elem): [1,2,3] => [] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-anchor/></p>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['items'], true, true);
    ctx = Object.create(ctx);
    const k1 = b2.values, v1 = b2.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b3 = b2.children[i1] = new Block2();
      b3.data[0] = ctx['item'];
      b2.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children from the beginning: [1,2,3,4,5] => [3,4,5] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children from the beginning: [1,2,3,4,5] => [3,4,5] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children from the end: [1,2,3,4,5] => [1,2,3] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children from the middle: [1,2,3,4,5] => [1,2,4,5] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children: [1,2,3] => [] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements remove children: [1,2,3] => [] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements removing elements (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`adding/removing elements removing elements 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`element reordering move element backward: [1,2,3,4] => [1,4,2,3] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`element reordering move element forward: [1,2,3,4] => [2,3,1,4] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`element reordering move element forward: [1,2,3,4] => [2,3,1,4] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`element reordering move element to end: [1,2,3] => [2,3,1] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`element reordering move element to end: [1,2,3] => [2,3,1] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`element reordering swaps first and last: [1,2,3,4] => [4,3,2,1] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`miscellaneous operations [2,4,5] => [4,5,3] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`miscellaneous operations move to left and leave hole: [1,4,5] => [4,6] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`miscellaneous operations move to left and replace: [1,2,3,4,5] => [4,1,2,3,6] (2 nodes) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`miscellaneous operations move to left and replace: [1,2,3,4,5] => [4,1,2,3,6] 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;
