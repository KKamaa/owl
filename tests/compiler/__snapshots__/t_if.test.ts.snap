// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-if a t-if next to a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>foo</div>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(2);
    const b2 = b1.children[0] = new Block1();
    if (ctx['cond']) {
      b1.children[1] = new BText(\`1\`);
    }
    return b1;
  }
}"
`;

exports[`t-if a t-if with two inner nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>yip</span>\`);
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div>yip</div>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(1);
    if (ctx['condition']) {
      const b2 = b1.children[0] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      const b4 = b2.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if boolean value condition elif (no outside node) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(4);
    if (ctx['color']=='black') {
      b1.children[0] = new BText(\`black pearl\`);
    } else if (ctx['color']=='yellow') {
      b1.children[1] = new BText(\`yellow submarine\`);
    } else if (ctx['color']=='red') {
      b1.children[2] = new BText(\`red is dead\`);
    } else {
      b1.children[3] = new BText(\`beer\`);
    }
    return b1;
  }
}"
`;

exports[`t-if boolean value condition elif 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(4);
    anchors = new Array(4);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
      this.anchors[2] = this.anchors[1].nextSibling;
      this.anchors[3] = this.anchors[2].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['color']=='black') {
      b1.children[0] = new BText(\`black pearl\`);
    } else if (ctx['color']=='yellow') {
      b1.children[1] = new BText(\`yellow submarine\`);
    } else if (ctx['color']=='red') {
      b1.children[2] = new BText(\`red is dead\`);
    } else {
      b1.children[3] = new BText(\`beer\`);
    }
    return b1;
  }
}"
`;

exports[`t-if boolean value condition else 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><span>begin</span><owl-anchor/><owl-anchor/><span>end</span></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild.nextSibling;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      b1.children[0] = new BText(\`ok\`);
    } else {
      b1.children[1] = new BText(\`ok-else\`);
    }
    return b1;
  }
}"
`;

exports[`t-if boolean value condition false else 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><span>begin</span><owl-anchor/><owl-anchor/><span>end</span></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild.nextSibling;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      b1.children[0] = new BText(\`fail\`);
    } else {
      b1.children[1] = new BText(\`fail-else\`);
    }
    return b1;
  }
}"
`;

exports[`t-if can use some boolean operators in expressions 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/><owl-anchor/><owl-anchor/><owl-anchor/><owl-anchor/><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(8);
    anchors = new Array(8);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
      this.anchors[2] = this.anchors[1].nextSibling;
      this.anchors[3] = this.anchors[2].nextSibling;
      this.anchors[4] = this.anchors[3].nextSibling;
      this.anchors[5] = this.anchors[4].nextSibling;
      this.anchors[6] = this.anchors[5].nextSibling;
      this.anchors[7] = this.anchors[6].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['cond1']&&ctx['cond2']) {
      b1.children[0] = new BText(\`and\`);
    }
    if (ctx['cond1']&&ctx['cond3']) {
      b1.children[1] = new BText(\`nope\`);
    }
    if (ctx['cond1']||ctx['cond3']) {
      b1.children[2] = new BText(\`or\`);
    }
    if (ctx['cond3']||ctx['cond4']) {
      b1.children[3] = new BText(\`nope\`);
    }
    if (ctx['m']>3) {
      b1.children[4] = new BText(\`mgt\`);
    }
    if (ctx['n']>3) {
      b1.children[5] = new BText(\`ngt\`);
    }
    if (ctx['m']<3) {
      b1.children[6] = new BText(\`mlt\`);
    }
    if (ctx['n']<3) {
      b1.children[7] = new BText(\`nlt\`);
    }
    return b1;
  }
}"
`;

exports[`t-if div containing a t-if with two inner nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>yip</span>\`);
  }
  
  class Block3 extends BStatic {
    static el = elem(\`<div>yip</div>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new BMulti(2);
      const b3 = b2.children[0] = new Block2();
      const b4 = b2.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`t-if dynamic content after t-if with two children nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-text/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    data = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
    update(prevData, data) {
      setText(this.anchors[0].nextSibling, prevData[0], data[0]);
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<p>1</p>\`);
  }
  
  class Block3 extends BStatic {
    static el = elem(\`<p>2</p>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new BMulti(2);
      const b3 = b2.children[0] = new Block2();
      const b4 = b2.children[1] = new Block3();
    }
    b1.data[0] = ctx['text'];
    return b1;
  }
}"
`;

exports[`t-if just a t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(1);
    if (ctx['condition']) {
      b1.children[0] = new BText(\`ok\`);
    }
    return b1;
  }
}"
`;

exports[`t-if simple t-if/t-else 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(2);
    if (ctx['condition']) {
      b1.children[0] = new BText(\`1\`);
    } else {
      b1.children[1] = new BText(\`2\`);
    }
    return b1;
  }
}"
`;

exports[`t-if simple t-if/t-else in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      b1.children[0] = new BText(\`1\`);
    } else {
      b1.children[1] = new BText(\`2\`);
    }
    return b1;
  }
}"
`;

exports[`t-if t-esc with t-elif 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (false) {
      b1.children[0] = new BText(\`abc\`);
    } else {
      b1.children[1] = new BText('x');
    }
    return b1;
  }
}"
`;

exports[`t-if t-esc with t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (true) {
      b1.children[0] = new BText('x');
    }
    return b1;
  }
}"
`;

exports[`t-if t-if and t-else with two nodes 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>a</span>\`);
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>b</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(2);
    if (ctx['condition']) {
      b1.children[0] = new BText(\`1\`);
    } else {
      const b2 = b1.children[1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      const b4 = b2.children[1] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if t-if in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      b1.children[0] = new BText(\`ok\`);
    }
    return b1;
  }
}"
`;

exports[`t-if t-if in a t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span>1<owl-anchor/></span>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild.nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['cond1']) {
      const b2 = b1.children[0] = new Block2();
      if (ctx['cond2']) {
        b2.children[0] = new BText(\`2\`);
      }
    }
    return b1;
  }
}"
`;

exports[`t-if t-if/t-else with more content 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(2);
    if (ctx['condition']) {
      if (ctx['condition']) {
        b1.children[0] = new BText(\`asf\`);
      }
    } else {
      b1.children[1] = new BText(\`coucou\`);
    }
    return b1;
  }
}"
`;

exports[`t-if t-set, then t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`title\`] = 'test';
    if (ctx['title']) {
      b1.children[0] = new BText(ctx['title']);
    }
    return b1;
  }
}"
`;

exports[`t-if t-set, then t-if, part 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>COUCOU</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`y\`] = true;
    ctx[\`x\`] = ctx['y'];
    if (ctx['x']) {
      const b2 = b1.children[0] = new Block2();
    }
    return b1;
  }
}"
`;

exports[`t-if t-set, then t-if, part 3 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>AAA</span>\`);
  }
  
  class Block3 extends BStatic {
    static el = elem(\`<span>BBB</span>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    ctx[\`y\`] = false;
    ctx[\`x\`] = ctx['y'];
    if (ctx['x']) {
      const b2 = b1.children[0] = new Block2();
    } else if (!ctx['x']) {
      const b3 = b1.children[1] = new Block3();
    }
    return b1;
  }
}"
`;

exports[`t-if two consecutive t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new BMulti(2);
    if (ctx['cond1']) {
      b1.children[0] = new BText(\`1\`);
    }
    if (ctx['cond2']) {
      b1.children[1] = new BText(\`2\`);
    }
    return b1;
  }
}"
`;

exports[`t-if two consecutive t-if in a div 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['cond1']) {
      b1.children[0] = new BText(\`1\`);
    }
    if (ctx['cond2']) {
      b1.children[1] = new BText(\`2\`);
    }
    return b1;
  }
}"
`;

exports[`t-if two t-ifs next to each other 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BNode, BComponentH, BHtml, BMulti, BElem, BStatic, BText, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = utils;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  class Block2 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  class Block3 extends BStatic {
    static el = elem(\`<p>1</p>\`);
  }
  
  class Block4 extends BStatic {
    static el = elem(\`<p>2</p>\`);
  }
  
  return function template(ctx, node = ctx.__owl__, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
      b2.data[0] = ctx['text'];
    }
    if (ctx['condition']) {
      const b3 = b1.children[1] = new BMulti(2);
      const b4 = b3.children[0] = new Block3();
      const b5 = b3.children[1] = new Block4();
    }
    return b1;
  }
}"
`;
