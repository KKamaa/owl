// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-foreach does not pollute the rendering context 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection([1]);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      b2.children[i1] = new BText(ctx['item']);
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach iterate on items (on a element node) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection([1,2]);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      const b3 = b2.children[i1] = new Block2();
      b3.data[0] = ctx['item'];
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach iterate on items 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection([3,2,1]);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      const b3 = b2.children[i1] = new BMulti(7);
      b3.children[0] = new BText(\` [\`);
      b3.children[1] = new BText(ctx['item_index']);
      b3.children[2] = new BText(\`: \`);
      b3.children[3] = new BText(ctx['item']);
      b3.children[4] = new BText(\` \`);
      b3.children[5] = new BText(ctx['item_value']);
      b3.children[6] = new BText(\`] \`);
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach iterate, dict param 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['value']);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item_index'];
      const b3 = b2.children[i1] = new BMulti(7);
      b3.children[0] = new BText(\` [\`);
      b3.children[1] = new BText(ctx['item_index']);
      b3.children[2] = new BText(\`: \`);
      b3.children[3] = new BText(ctx['item']);
      b3.children[4] = new BText(\` \`);
      b3.children[5] = new BText(ctx['item_value']);
      b3.children[6] = new BText(\`] \`);
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach iterate, position 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(Array(5));
    b2.forEach(\`elem\`, ctx, (i1, ctx) => {
      let key1 = ctx['elem'];
      const b3 = b2.children[i1] = new BMulti(6);
      b3.children[0] = new BText(\` -\`);
      if (ctx['elem_first']) {
        b3.children[1] = new BText(\` first\`);
      }
      if (ctx['elem_last']) {
        b3.children[2] = new BText(\` last\`);
      }
      b3.children[3] = new BText(\` (\`);
      b3.children[4] = new BText(ctx['elem_index']);
      b3.children[5] = new BText(\`) \`);
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach simple iteration (in a node) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection([3,2,1]);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      b2.children[i1] = new BText(ctx['item']);
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach simple iteration 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    const b1 = new BCollection([3,2,1]);
    b1.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      b1.children[i1] = new BText(ctx['item']);
      b1.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach simple iteration with two nodes inside 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>a<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span>b<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new BCollection([3,2,1]);
    b1.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      const b2 = b1.children[i1] = new BMulti(2);
      const b3 = b2.children[0] = new Block1();
      b3.data[0] = ctx['item'];
      const b4 = b2.children[1] = new Block2();
      b4.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach t-call with body in t-foreach in t-foreach 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    const b1 = new BMulti(7);
    b1.children[0] = new BText(\` [\`);
    b1.children[1] = new BText(ctx['a']);
    b1.children[2] = new BText(\`] [\`);
    b1.children[3] = new BText(ctx['b']);
    b1.children[4] = new BText(\`] [\`);
    b1.children[5] = new BText(ctx['c']);
    b1.children[6] = new BText(\`] \`);
    return b1;
  }
}"
`;

exports[`t-foreach t-call with body in t-foreach in t-foreach 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><span>[<owl-text/>][<owl-text/>][<owl-text/>]</span></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    data = new Array(3);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
    update() {
      const el1 = this.anchors[0].nextSibling.firstChild.nextSibling;
      el1.textContent = toString(this.data[0]);
      const el2 = el1.nextSibling.nextSibling;
      el2.textContent = toString(this.data[1]);
      el2.nextSibling.nextSibling.textContent = toString(this.data[2]);
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['numbers']);
    b2.forEach(\`a\`, ctx, (i1, ctx) => {
      let key1 = ctx['a'];
      const b3 = b2.children[i1] = new BMulti(2);
      const b4 = b3.children[0] = new BCollection(ctx['letters']);
      b4.forEach(\`b\`, ctx, (i2, ctx) => {
        let key2 = ctx['b'];
        ctx = Object.create(ctx);
        ctx[\`c\`] = 'x'+'_'+ctx['a']+'_'+ctx['b'];
        b4.children[i2] = call(\`sub\`, ctx, parent);
        ctx = ctx.__proto__;
        b4.keys[i2] = key2;
      });
      const b5 = b3.children[1] = new Block2();
      b5.data[0] = ctx['c'];
      b2.keys[i1] = key1;
    });
    b1.data[0] = ctx['a'];
    b1.data[1] = ctx['b'];
    b1.data[2] = ctx['c'];
    return b1;
  }
}"
`;

exports[`t-foreach t-call without body in t-foreach in t-foreach 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new BMulti(7);
    ctx[\`c\`] = 'x'+'_'+ctx['a']+'_'+ctx['b'];
    b1.children[0] = new BText(\` [\`);
    b1.children[1] = new BText(ctx['a']);
    b1.children[2] = new BText(\`] [\`);
    b1.children[3] = new BText(ctx['b']);
    b1.children[4] = new BText(\`] [\`);
    b1.children[5] = new BText(ctx['c']);
    b1.children[6] = new BText(\`] \`);
    return b1;
  }
}"
`;

exports[`t-foreach t-call without body in t-foreach in t-foreach 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><span>[<owl-text/>][<owl-text/>][<owl-text/>]</span></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    data = new Array(3);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
    update() {
      const el1 = this.anchors[0].nextSibling.firstChild.nextSibling;
      el1.textContent = toString(this.data[0]);
      const el2 = el1.nextSibling.nextSibling;
      el2.textContent = toString(this.data[1]);
      el2.nextSibling.nextSibling.textContent = toString(this.data[2]);
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['numbers']);
    b2.forEach(\`a\`, ctx, (i1, ctx) => {
      let key1 = ctx['a'];
      const b3 = b2.children[i1] = new BMulti(2);
      const b4 = b3.children[0] = new BCollection(ctx['letters']);
      b4.forEach(\`b\`, ctx, (i2, ctx) => {
        let key2 = ctx['b'];
        b4.children[i2] = call(\`sub\`, ctx, parent);
        b4.keys[i2] = key2;
      });
      const b5 = b3.children[1] = new Block2();
      b5.data[0] = ctx['c'];
      b2.keys[i1] = key1;
    });
    b1.data[0] = ctx['a'];
    b1.data[1] = ctx['b'];
    b1.data[2] = ctx['c'];
    return b1;
  }
}"
`;

exports[`t-foreach t-foreach in t-foreach 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['numbers']);
    b2.forEach(\`number\`, ctx, (i1, ctx) => {
      let key1 = ctx['number'];
      const b3 = b2.children[i1] = new BCollection(ctx['letters']);
      b3.forEach(\`letter\`, ctx, (i2, ctx) => {
        let key2 = ctx['letter'];
        const b4 = b3.children[i2] = new BMulti(4);
        b4.children[0] = new BText(\` [\`);
        b4.children[1] = new BText(ctx['number']);
        b4.children[2] = new BText(ctx['letter']);
        b4.children[3] = new BText(\`] \`);
        b3.keys[i2] = key2;
      });
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach t-foreach with t-if inside (no external node) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new BCollection(ctx['elems']);
    b1.forEach(\`elem\`, ctx, (i1, ctx) => {
      let key1 = ctx['elem'].id;
      const b2 = b1.children[i1] = new BMulti(1);
      if (ctx['elem'].id<3) {
        const b3 = b2.children[0] = new Block1();
        b3.data[0] = ctx['elem'].text;
      }
      b1.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach t-foreach with t-if inside 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['elems']);
    b2.forEach(\`elem\`, ctx, (i1, ctx) => {
      let key1 = ctx['elem'].id;
      const b3 = b2.children[i1] = new BMulti(1);
      if (ctx['elem'].id<3) {
        const b4 = b3.children[0] = new Block2();
        b4.data[0] = ctx['elem'].text;
      }
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach t-key on an inside node 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<p><owl-text/></p>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new BCollection([3,2,1]);
    b1.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = i1;
      key1 = ctx['item'];
      const b2 = b1.children[i1] = new Block1();
      b2.data[0] = ctx['item'];
      b1.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach throws error if invalid loop expression 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span/>\`);
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['abc']);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      key1 = ctx['item_index'];
      const b3 = b2.children[i1] = new Block2();
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;

exports[`t-foreach warn if no key in some case 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection([1,2]);
    b2.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = i1;
      const b3 = b2.children[i1] = new Block2();
      b3.data[0] = ctx['item'];
      b2.keys[i1] = key1;
    });
    return b1;
  }
}"
`;
