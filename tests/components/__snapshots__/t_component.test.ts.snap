// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-component switching dynamic component 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child a</div>\`);
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component switching dynamic component 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    const b1 = new BText(\`child b\`);
    return b1;
  }
}"
`;

exports[`t-component switching dynamic component 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    let Comp2 = ctx['Child'];
    const b1 = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, parent));
    return b1;
  }
}"
`;

exports[`t-component t-component works in simple case 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>child</div>\`);
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`t-component t-component works in simple case 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    let Comp2 = ctx['Child'];
    const b1 = new BDispatch(Comp2, new BComponent(Comp2, {}, \`__1\`, ctx, parent));
    return b1;
  }
}"
`;
