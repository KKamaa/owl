// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`refs refs are properly bound in slots 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    b1.children[0] = callSlot(ctx, parent, 'footer');
    return b1;
  }
}"
`;

exports[`refs refs are properly bound in slots 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><span class=\\"counter\\"><owl-text/></span><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    data = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild.nextSibling;
    }
    update() {
      this.el.firstChild.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<button>do something</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
    update() {
      this.refs[\`myButton\`] = this.el;
    }
    remove() {
      delete this.refs[\`myButton\`];
      super.remove();
    }
  }
  
  const slot3 = ctx => parent => {
    const refs = ctx.__owl__.refs
    const b2 = new Block2();
    b2.handlers[0] = (e) => ctx.__owl__.component['doSomething'](e);
    b2.refs = refs;
    return b2;
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.data[0] = ctx['state'].val;
    const ctx2 = capture(ctx);
    const b3 = b1.children[0] = new BComponent(\`Dialog\`, {}, \`__1\`, ctx, parent);
    b3.node.slots = {'footer': slot3(ctx2)};
    return b1;
  }
}"
`;
