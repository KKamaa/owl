// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-raw literal 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = new BHtml('ok');
    return b1;
  }
}"
`;

exports[`t-raw literal, no outside html element 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(1);
    b1.children[0] = new BHtml('ok');
    return b1;
  }
}"
`;

exports[`t-raw multiple calls to t-raw 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><div>Greeter</div><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling.nextSibling;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx[zero]);
    b1.children[1] = new BHtml(ctx[zero]);
    return b1;
  }
}"
`;

exports[`t-raw multiple calls to t-raw 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  const callTemplate_2 = getTemplate(\`sub\`);
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>coucou</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    ctx = Object.create(ctx);
    const b2 = new Block2();
    ctx[zero] = b2;
    b1.children[0] = callTemplate_2(ctx, node, key + \`__1\`);
    return b1;
  }
}"
`;

exports[`t-raw not escaping 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw and another sibling node 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><span>hello</span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild.nextSibling;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw on a node with a body, as a default 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = new BText(\`nope\`);
    b1.children[0] = new BHtml(withDefault(ctx['var'], b2));
    return b1;
  }
}"
`;

exports[`t-raw t-raw on a node with a dom node in body, as a default 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div>nope</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = new Block2();
    b1.children[0] = new BHtml(withDefault(ctx['var'], b2));
    return b1;
  }
}"
`;

exports[`t-raw t-raw with a <t/> in body 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(1);
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw with comment 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw t-raw with just a t-set t-value in body 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(1);
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;

exports[`t-raw variable 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = new BHtml(ctx['var']);
    return b1;
  }
}"
`;
