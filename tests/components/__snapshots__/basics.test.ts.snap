// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basics a class component inside a class component, no external dom 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return node => function template(ctx) {
    const b1 = node.getChild(\`Child\`, {}, \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component, no external dom 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return node => function template(ctx) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics a component inside a component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return node => function template(ctx) {
    const b1 = new Block1();
    b1.children[0] = node.getChild(\`Child\`, {}, \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics a component inside a component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return node => function template(ctx) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics can mount a component with dynamic text 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return node => function template(ctx) {
    const b1 = new BText(ctx['value']);
    return b1;
  }
}"
`;

exports[`basics can mount a component with just some text 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return node => function template(ctx) {
    const b1 = new BText(\`just text\`);
    return b1;
  }
}"
`;

exports[`basics can mount a component with no text 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return node => function template(ctx) {
    const b1 = new BText(\`\`);
    return b1;
  }
}"
`;

exports[`basics can mount a simple component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return node => function template(ctx) {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics can mount a simple component with multiple roots 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span/>\`);
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return node => function template(ctx) {
    const b1 = new BMulti(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return node => function template(ctx) {
    const b1 = node.getChild(\`Child\`, {value: 42}, \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return node => function template(ctx) {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics component with dynamic content can be updated 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<button><owl-text/></button>\`);
    data = new Array(1);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return node => function template(ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = [ctx, 'inc'];
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics simple component, useState 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return node => function template(ctx) {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;
