// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`event handling can set handler on sub component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`event handling can set handler on sub component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new BMulti(2);
    const b2 = b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b2.handlers = new Array(1);
    b2.handlers[0] = ['click', (e) => ctx.__owl__.component['inc'](e)];
    b1.children[1] = new BText(ctx['state'].value);
    return b1;
  }
}"
`;

exports[`event handling handler receive the event as argument 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`event handling handler receive the event as argument 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new BMulti(2);
    const b2 = b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b2.handlers = new Array(1);
    b2.handlers[0] = ['click', (e) => ctx.__owl__.component['inc'](e)];
    b1.children[1] = new BText(ctx['state'].value);
    return b1;
  }
}"
`;

exports[`event handling support for callable expression in event handler 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/><input type=\\"text\\"/></div>\`);
    data = new Array(1);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el.firstChild.nextSibling, \`input\`, 0);
    }
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.data[0] = ctx['state'].value;
    const v1 = ctx['obj'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.onInput })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;
