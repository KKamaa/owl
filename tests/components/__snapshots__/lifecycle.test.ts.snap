// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lifecycle hooks basic checks for a component 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<span>test</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks components are unmounted and destroyed if no longer in DOM 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks components are unmounted and destroyed if no longer in DOM 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].ok) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return multi([b2]);
  }
}"
`;

exports[`lifecycle hooks components are unmounted and destroyed if no longer in DOM, even after updateprops 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<span><owl-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['props'].n;
    return block1([d1]);
  }
}"
`;

exports[`lifecycle hooks components are unmounted and destroyed if no longer in DOM, even after updateprops 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block2 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].flag) {
      let b3 = node.getChild(\`Child\`, {n: ctx['state'].n}, key + \`__1\`, ctx);
      b2 = block2([], [b3]);
    }
    return multi([b2]);
  }
}"
`;

exports[`lifecycle hooks hooks are called in proper order in widget creation/destruction 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks hooks are called in proper order in widget creation/destruction 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`Child\`, {a: ctx['state'].a}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 2 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 2 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`GrandChild\`, {}, key + \`__1\`, ctx);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 2 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasChild) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return multi([b2]);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 3 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 3 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`GrandChild\`, {}, key + \`__1\`, ctx);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 3 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasChild) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return multi([b2]);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 4 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 4 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`GrandChild\`, {}, key + \`__1\`, ctx);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 4 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasChild) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return multi([b2]);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 5 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 5 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].hasChild) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return multi([b2]);
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 6 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks lifecycle semantics, part 6 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`Child\`, {value: ctx['state'].value}, key + \`__1\`, ctx);
  }
}"
`;

exports[`lifecycle hooks mounted hook is called if mounted in DOM 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks mounted hook is called on subcomponents, in proper order 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks mounted hook is called on subcomponents, in proper order 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks mounted hook is called on subsubcomponents, in proper order 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks mounted hook is called on subsubcomponents, in proper order 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`ChildChild\`, {}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks mounted hook is called on subsubcomponents, in proper order 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['state'].flag) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks onRender 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<button owl-handler-0=\\"click\\"><owl-text-1/></button>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = [ctx, 'increment'];
    let d2 = ctx['state'].value;
    return block1([d1, d2]);
  }
}"
`;

exports[`lifecycle hooks onRender 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
  }
}"
`;

exports[`lifecycle hooks patched hook is called after updateProps 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks patched hook is called after updateProps 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`Child\`, {a: ctx['state'].a}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks patched hook is called after updating State 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks willPatch, patched hook are called on subsubcomponents, in proper order 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['props'].n;
    return block1([d1]);
  }
}"
`;

exports[`lifecycle hooks willPatch, patched hook are called on subsubcomponents, in proper order 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`ChildChild\`, {n: ctx['props'].n}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks willPatch, patched hook are called on subsubcomponents, in proper order 3`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = node.getChild(\`Child\`, {n: ctx['state'].n}, key + \`__1\`, ctx);
    return block1([], [b2]);
  }
}"
`;

exports[`lifecycle hooks willStart hook is called on sub component 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks willStart hook is called on sub component 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
  }
}"
`;

exports[`lifecycle hooks willStart is called 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<span>simple vnode</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks willStart is called with component as this 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<span>simple vnode</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks willStart, mounted on subwidget rendered after main is mounted in some other position 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`lifecycle hooks willStart, mounted on subwidget rendered after main is mounted in some other position 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<div><owl-child-0/><owl-child-1/></div>\`);
  let block3 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b3;
    if (ctx['state'].ok) {
      b2 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    } else {
      b3 = block3();
    }
    return block1([], [b2, b3]);
  }
}"
`;

exports[`lifecycle hooks willUpdateProps hook is called 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  let block1 = createBlock(\`<span><owl-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['props'].n;
    return block1([d1]);
  }
}"
`;

exports[`lifecycle hooks willUpdateProps hook is called 2`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call, callSlot, capture } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return node.getChild(\`Child\`, {n: ctx['state'].n}, key + \`__1\`, ctx);
  }
}"
`;
