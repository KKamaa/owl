// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-on can bind event handler 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](e);
    return b1;
  }
}"
`;

exports[`t-on can bind handlers with arguments 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const arg1 = [5];
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](...arg1, e);
    return b1;
  }
}"
`;

exports[`t-on can bind handlers with empty  object 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const arg1 = [{}];
    b1.handlers[0] = (e) => ctx.__owl__.component['doSomething'](...arg1, e);
    return b1;
  }
}"
`;

exports[`t-on can bind handlers with empty object (with non empty inner string) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const arg1 = [{}];
    b1.handlers[0] = (e) => ctx.__owl__.component['doSomething'](...arg1, e);
    return b1;
  }
}"
`;

exports[`t-on can bind handlers with empty object (with non empty inner string) 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<ul><owl-anchor/></ul>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<li><a>link</a></li>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el.firstChild, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(['someval'], true, true);
    ctx = Object.create(ctx);
    const k1 = b2.values, v1 = b2.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`action\`] = v1[i1];
      ctx[\`action_first\`] = i1 === 0;
      ctx[\`action_last\`] = i1 === v1.length - 1;
      ctx[\`action_index\`] = i1;
      ctx[\`action_value\`] = k1[i1];
      let key1 = ctx['action_index'];
      const b3 = b2.children[i1] = new Block2();
      const arg2 = [ctx['action']];
      b3.handlers[0] = (e) => ctx.__owl__.component['activate'](...arg2, e);
      b2.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`t-on can bind handlers with object arguments 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const arg1 = [{val:5}];
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](...arg1, e);
    return b1;
  }
}"
`;

exports[`t-on can bind two event handlers 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(2);
    build() {
      const el1 = this.el;
      this.setupHandler(el1, \`click\`, 0);
      this.setupHandler(el1, \`dblclick\`, 1);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['handleClick'](e);
    b1.handlers[1] = (e) => ctx.__owl__.component['handleDblClick'](e);
    return b1;
  }
}"
`;

exports[`t-on handler is bound to proper owner 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](e);
    return b1;
  }
}"
`;

exports[`t-on handler is bound to proper owner, part 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new BCollection([1], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`value\`] = v1[i1];
      ctx[\`value_first\`] = i1 === 0;
      ctx[\`value_last\`] = i1 === v1.length - 1;
      ctx[\`value_index\`] = i1;
      ctx[\`value_value\`] = k1[i1];
      let key1 = i1;
      key1 = ctx['value'];
      const b2 = b1.children[i1] = new Block1();
      b2.handlers[0] = (e) => ctx.__owl__.component['add'](e);
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`t-on handler is bound to proper owner, part 3 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](e);
    return b1;
  }
}"
`;

exports[`t-on handler is bound to proper owner, part 3 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    const b1 = call(\`sub\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`t-on handler is bound to proper owner, part 4 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](e);
    return b1;
  }
}"
`;

exports[`t-on handler is bound to proper owner, part 4 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return function template(ctx, parent = ctx) {
    const b1 = new BCollection([1], false, false);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`value\`] = v1[i1];
      ctx[\`value_first\`] = i1 === 0;
      ctx[\`value_last\`] = i1 === v1.length - 1;
      ctx[\`value_index\`] = i1;
      ctx[\`value_value\`] = k1[i1];
      let key1 = ctx['value'];
      b1.children[i1] = call(\`sub\`, ctx, parent);
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`t-on receive event in first argument 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['add'](e);
    return b1;
  }
}"
`;

exports[`t-on t-on with inline statement (function call) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const v1 = ctx['state'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.incrementCounter(2) })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;

exports[`t-on t-on with inline statement 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Click</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const v1 = ctx['state'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.counter++ })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;

exports[`t-on t-on with inline statement, part 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Toggle</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const v1 = ctx['state'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.flag=!v1.flag })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;

exports[`t-on t-on with inline statement, part 3 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<button>Toggle</button>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const v1 = ctx['state'];
    const v2 = ctx['someFunction'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.n=v2(3) })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;

exports[`t-on t-on with t-call 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<p>lucas</p>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.handlers[0] = (e) => ctx.__owl__.component['update'](e);
    return b1;
  }
}"
`;

exports[`t-on t-on with t-call 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    b1.children[0] = call(\`sub\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`t-on t-on, with arguments and t-call 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<p>lucas</p>\`);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el, \`click\`, 0);
    }
  }
  
  return function template(ctx, parent = ctx) {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    const arg1 = [ctx['value']];
    b1.handlers[0] = (e) => ctx.__owl__.component['update'](...arg1, e);
    return b1;
  }
}"
`;

exports[`t-on t-on, with arguments and t-call 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    b1.children[0] = call(\`sub\`, ctx, parent);
    return b1;
  }
}"
`;
