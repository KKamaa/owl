// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async rendering destroying a widget before start is over 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 1 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['getValue']();
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 1 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>b</span>\`);
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 1 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  return (ctx, parent = ctx) => {
    const b1 = new BMulti(2);
    if (ctx['state'].flagA) {
      b1.children[0] = new BComponent(\`ChildA\`, {}, \`__1\`, ctx, parent);
    }
    if (ctx['state'].flagB) {
      b1.children[1] = new BComponent(\`ChildB\`, {}, \`__2\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 2 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>a<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 2 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>b<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 2 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    if (ctx['state'].flagB) {
      b1.children[1] = new BComponent(\`ChildB\`, {val: ctx['state'].valB}, \`__2\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 3 (patching in the same frame) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>a<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 3 (patching in the same frame) 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>b<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`creating two async components, scenario 3 (patching in the same frame) 3`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    anchors = new Array(2);
    build() {
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    if (ctx['state'].flagB) {
      b1.children[1] = new BComponent(\`ChildB\`, {val: ctx['state'].valB}, \`__2\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`destroying/recreating a subwidget with different props (if start is not over) 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span>child:<owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.nextSibling.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`destroying/recreating a subwidget with different props (if start is not over) 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    if (ctx['state'].val>1) {
      b1.children[0] = new BComponent(\`Child\`, {val: ctx['state'].val}, \`__1\`, ctx, parent);
    }
    return b1;
  }
}"
`;

exports[`update a sub-component twice in the same frame 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`update a sub-component twice in the same frame 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return (ctx, parent = ctx) => {
    const b1 = new Block1();
    b1.children[0] = new BComponent(\`ChildA\`, {val: ctx['state'].valA}, \`__1\`, ctx, parent);
    return b1;
  }
}"
`;
