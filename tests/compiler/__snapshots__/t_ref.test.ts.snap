// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-ref can get a dynamic ref on a node 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><span/></div>\`);
    data = new Array(1);
    update() {
      this.refs[this.data[0]] = this.el.firstChild;
    }
    remove() {
      delete this.refs[this.data[0]];
      super.remove();
    }
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    const b1 = new Block1();
    b1.refs = refs;
    const v1 = ctx['id'];
    b1.data[0] = \`myspan\${v1}\`;
    return b1;
  }
}"
`;

exports[`t-ref can get a ref on a node 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><span/></div>\`);
    update() {
      this.refs[\`myspan\`] = this.el.firstChild;
    }
    remove() {
      delete this.refs[\`myspan\`];
      super.remove();
    }
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    const b1 = new Block1();
    b1.refs = refs;
    return b1;
  }
}"
`;

exports[`t-ref ref in a t-call 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, parent = ctx) {
    const b1 = new Block1();
    b1.children[0] = call(\`sub\`, ctx, parent);
    return b1;
  }
}"
`;

exports[`t-ref ref in a t-call 2`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div>1<span/>2</div>\`);
    update() {
      this.refs[\`name\`] = this.el.firstChild.nextSibling;
    }
    remove() {
      delete this.refs[\`name\`];
      super.remove();
    }
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    const b1 = new Block1();
    b1.refs = refs;
    return b1;
  }
}"
`;

exports[`t-ref ref in a t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span/>\`);
    update() {
      this.refs[\`name\`] = this.el;
    }
    remove() {
      delete this.refs[\`name\`];
      super.remove();
    }
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
      b2.refs = refs;
    }
    return b1;
  }
}"
`;

exports[`t-ref refs in a loop 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(2);
    update() {
      const el1 = this.el;
      this.refs[this.data[0]] = el1;
      el1.firstChild.textContent = toString(this.data[1]);
    }
    remove() {
      delete this.refs[this.data[0]];
      super.remove();
    }
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(ctx['items'], true, true);
    ctx = Object.create(ctx);
    const k1 = b2.values, v1 = b2.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      ctx[\`item_first\`] = i1 === 0;
      ctx[\`item_last\`] = i1 === v1.length - 1;
      ctx[\`item_index\`] = i1;
      ctx[\`item_value\`] = k1[i1];
      let key1 = i1;
      key1 = ctx['item'];
      const b3 = b2.children[i1] = new Block2();
      b3.refs = refs;
      const v2 = ctx['item'];
      b3.data[0] = \`\${v2}\`;
      b3.data[1] = ctx['item'];
      b2.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`t-ref two refs, one in a t-if 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText, BDispatch} = Blocks;
  let {elem, toString, withDefault, call, zero, callSlot, capture} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<div><owl-anchor/><p/></div>\`);
    children = new Array(1);
    anchors = new Array(1);
    build() {
      this.anchors[0] = this.el.firstChild;
    }
    update() {
      this.refs[\`p\`] = this.anchors[0].nextSibling;
    }
    remove() {
      delete this.refs[\`p\`];
      super.remove();
    }
  }
  
  class Block2 extends BNode {
    static el = elem(\`<span/>\`);
    update() {
      this.refs[\`name\`] = this.el;
    }
    remove() {
      delete this.refs[\`name\`];
      super.remove();
    }
  }
  
  return function template(ctx, parent = ctx) {
    const refs = ctx.__owl__.refs;
    const b1 = new Block1();
    if (ctx['condition']) {
      const b2 = b1.children[0] = new Block2();
      b2.refs = refs;
    }
    b1.refs = refs;
    return b1;
  }
}"
`;
